package stemcraft.components;

import org.bukkit.configuration.ConfigurationSection;
import org.bukkit.entity.EnderDragon;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntityDeathEvent;
import org.bukkit.event.entity.PlayerDeathEvent;
import org.bukkit.plugin.Plugin;
import stemcraft.objects.SMComponent;

public class DragonRewards extends SMComponent {

    private Plugin plugin;
    private int dragonDeathTimeout;
    private int maxDistance;

    @Override
    public void registerEvents() {
        sm.getServer().getPluginManager().registerEvents(this, sm);
    }

    @EventHandler
    public void onEntityDeath(EntityDeathEvent event) {
        if (!(event.getEntity() instanceof EnderDragon)) {
            return;
        }

        EnderDragon dragon = (EnderDragon) event.getEntity();

        // Check if the dragon was killed within the specified timeout
        if (dragon.getTime() >= dragonDeathTimeout) {
            return;
        }

        for (Player player : plugin.getServer().getOnlinePlayers()) {
            // Check if the player is in the End world and meets the distance requirements
            if (!player.getWorld().getName().equalsIgnoreCase("world_the_end")
                    || player.getLocation().distance(dragon.getLocation()) > maxDistance) {
                continue;
            }

            // Grant permissions to the player
            ConfigurationSection permissionsSection =
                    plugin.getConfig().getConfigurationSection("DragonPermissions.give");
            if (permissionsSection != null) {
                for (String permission : permissionsSection.getKeys(false)) {
                    player.addAttachment(plugin, permission, true);
                }
            }
        }
    }

    @EventHandler
    public void onPlayerDeath(PlayerDeathEvent event) {
        // Remove permissions from the player upon death
        Player player = event.getEntity();
        player.getEffectivePermissions().stream()
                .filter(permission -> permission.getAttachment() != null
                        && permission.getAttachment().getPlugin() == plugin)
                .forEach(permission -> player.removeAttachment(permission.getAttachment()));
    }
}
