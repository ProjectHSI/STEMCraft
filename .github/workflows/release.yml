name: Maven Build and Release

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && startsWith(github.head_ref, 'release/')

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Build with Maven
      run: mvn clean install --file pom.xml

    - name: Extract Version from Branch Name
      run: |
        BRANCH_NAME=${GITHUB_HEAD_REF}
        VERSION_NUMBER=${BRANCH_NAME#release/}
        if [[ ! $VERSION_NUMBER =~ \.[0-9]+\.[0-9]+ ]]; then
          VERSION_NUMBER="${VERSION_NUMBER}.0"
        fi
        echo "VERSION_NUMBER=${VERSION_NUMBER}" >> $GITHUB_ENV

    - name: Identify JAR File
      run: |
        JAR_PATH=$(ls target/STEMCraft-*.jar | head -n 1)
        if [ -z "$JAR_PATH" ]; then
          echo "Error: JAR file not found."
          exit 1
        fi
        JAR_FILE=$(basename "$JAR_PATH")
        echo "JAR_PATH=${JAR_PATH}" >> $GITHUB_ENV
        echo "JAR_FILE=${JAR_FILE}" >> $GITHUB_ENV
        
    - name: Extract Release Notes
      run: |
        VERSION_NUMBER=${{ env.VERSION_NUMBER }}
        RELEASE_NOTES=$(awk "/^### \[?$VERSION_NUMBER\]?/{flag=1; next} /^##/{flag=0} flag" README.md)
        # Trim leading and trailing whitespace and empty lines
        RELEASE_NOTES=$(echo "$RELEASE_NOTES" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
        # Remove empty lines
        RELEASE_NOTES=$(echo "$RELEASE_NOTES" | sed '/^$/d')
        echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
        echo "$RELEASE_NOTES" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.VERSION_NUMBER }}
        name: ${{ env.VERSION_NUMBER }}
        body: ${{ env.RELEASE_NOTES }}
        draft: false
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }}
        files: ${{ env.JAR_PATH }}
        
      
    #- name: Create Release
    #  id: create_release
    #  uses: actions/create-release@v1
    #  env:
    #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #  with:
    #    tag_name: ${{ env.VERSION_NUMBER }}
    #    release_name: ${{ env.VERSION_NUMBER }}
    #    body: ${{ env.RELEASE_NOTES }}
    #    draft: false
    #    prerelease: false

    #- name: Upload Release Asset
    #  uses: actions/upload-release-asset@v1
    #  env:
    #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #  with:
    #    upload_url: ${{ steps.create_release.outputs.upload_url }}
    #    asset_path: ${{ env.JAR_PATH }}
    #    asset_name: ${{ env.JAR_FILE }}
    #    asset_content_type: application/java-archive
